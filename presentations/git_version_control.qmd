---
title: "Introduction into git"
subtitle: "version control"
date: last-modified
author: "David Jansen"
format:
  revealjs: 
    theme: sky
    css: ../styles.css
    reveal_plugins: notes
    mathjax: NULL
---

# Content

```{r}
library(tidyverse)
```

-   Version control

-   Git

-   Github

-   Naming of folders, files and scripts.

-   MCEVBD github

## What is version control

![](/presentations/figures/fun_version_control.gif){fig-align="center" width="900"}

## What is version control

-   Keep track and saves all you changes to code

-   Good backup source

-   Easier to fix mistakes

-   Code is open and easy to share

-   Multiple people working on the same code

## What is Git

-   Git is a version control system that allows developers to track changes in their code
-   installed on your own computer
-   controlled through mostly terminal
    -   but e.g. Rstudio have systems to make it easier
-   there are alternatives but git is most common (at least in science)

## What is GitHub

-   GitHub is a web-based hosting service for git repositories.

-   Enables you to store and share code for different projects

-   More advanced

    -   Github actions

    -   Github pages

    -   Together they can e.g. build and host a webpage (e.g. this presentation).

## Let's have some fun !!

![](/presentations/figures/spike-monkey-typing.gif)

## Let's have some fun

Sorry I forgot I am in an mosquito lab

![](/presentations/figures/mosquito_typing.jpg)

## First steps

-   Make an account
    -   https://github.com/signup
-   Install git
    -   https://github.com/git-guides/install-git
-   [Github student account](https://docs.github.com/en/education/explore-the-benefits-of-teaching-and-learning-with-github-education/github-global-campus-for-students/apply-to-github-global-campus-as-a-student)
-   private repositories

## Make a repository

-   Method 1 (easy)
    -   Create repository on github
    -   <https://github.com>
-   Method 2 (harder)
    -   use [Git Repo](https://gerrit.googlesource.com/git-repo)
        -    Create a repository from command line
        -   Not today

## Terminal

-   'Easy' start with git bash

[<https://education.github.com/git-cheat-sheet-education.pdf>]{style="font-size: 30px"}

Let's go to the terminal.

## Terminal

```       
echo "# training_repo" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin git@github.com:david-awam-jansen/training_repo.git
git push -u origin main
```


## Terminal 

```
git status
git add
git commit

```

## Rstudio examples

- terminal
- build-in


## Naming

-   Use descriptive names for folders, files and variables

> -   Understandable but not to long
>     -   m1 versus glm_count_full
>     -   data versus tick_counts_EA

::: callout-tip
While a computer will ultimately run your code, it'll be read by humans, so write code intended for humans!
:::

## Naming {.smaller}

> -   Be aware on naming rules of programs
>     -   Avoid special characters (\$, \@, \*)
>     -   Avoid name of functions
>     -   No spaces !!
>     -   Case-sensitive (e.g. R) versus case insensitive (SQL)
>     -   R (and many other languages) names can't start with numbers and does not like spaces
>     -   'car speed in miles per hour' versus 'car speed (mph)' versus car_speed_mph'

## Naming {.smaller}

-   Be aware on naming rules of programs
    -   Avoid special characters (\$, \@, \*)
    -   Avoid name of functions
    -   No spaces !!
    -   Case-sensitive (e.g. R) versus case insensitive (SQL)
    -   R (and many other languages) names can't start with numbers and does not like spaces
    -   'car speed in miles per hour' versus 'car speed (mph)' versus car_speed_mph'

## Naming {.smaller}

-   Be aware on naming rules of programs
    -   Avoid special characters (\$, \@, \*)
    -   Avoid name of functions
    -   No spaces !!
    -   Case-sensitive (e.g. R) versus case insensitive (SQL)
    -   R (and many other languages) names can't start with numbers and does not like spaces
    -   'car speed in miles per hour' versus 'car speed (mph)' versus car_speed_mph'
-   styles
    -   camelCase
    -   PascalCase
    -   snake_case

> -   be consistent

# Take home

> -   keep raw data raw
> -   use code to clean data
> -   document code and data
> -   ***No Spaces :-)***

## Bonus

![](figures/debugging.jpg){fig-align="center"}

## How to deal with R (programming) errors {.smaller}

1.  don't get frustrated by error messages

2.  read the error message

3.  google the error message

4.  google solutions or use ChatGPT

5.  trial and error

    1.  it works --\> go back to your analysis

        ![](figures/1000_F_264248967_rZHfZJ3b7dfAzrippDMZ35pbjOAfanKH.jpg){width="100"}

    2.  error -\> go back to 1.
